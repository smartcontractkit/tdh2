// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	config "github.com/smartcontractkit/tdh2/go/ocr2/decryptionplugin/config"
	mock "github.com/stretchr/testify/mock"
)

// ConfigParser is an autogenerated mock type for the ConfigParser type
type ConfigParser struct {
	mock.Mock
}

// ParseConfig provides a mock function with given fields: offchainConfig
func (_m *ConfigParser) ParseConfig(offchainConfig []byte) (*config.ReportingPluginConfigWrapper, error) {
	ret := _m.Called(offchainConfig)

	var r0 *config.ReportingPluginConfigWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*config.ReportingPluginConfigWrapper, error)); ok {
		return rf(offchainConfig)
	}
	if rf, ok := ret.Get(0).(func([]byte) *config.ReportingPluginConfigWrapper); ok {
		r0 = rf(offchainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ReportingPluginConfigWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(offchainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConfigParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfigParser creates a new instance of ConfigParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfigParser(t mockConstructorTestingTNewConfigParser) *ConfigParser {
	mock := &ConfigParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
